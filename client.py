import socket
import sys
import hamming

with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:

    server_address = ('192.168.0.102', 8001)
    s.connect(server_address)
    print('Connected to {} port {}'.format(*server_address))
    encoder = hamming.Hamming(33)
    message = "В Пандоре команда музыкантов пометила каждую музыку более чем 400 атрибутами. Затем, когда пользователь выбирает музыкальную станцию, песни, " \
              "соответствующие атрибутам станции, будут добавлены в список воспроизведения (Music Genome Project | Pandora, Howe | Pandora). Это основанная на содержании рекомендация." \
              " Пользователи или элементы имеют профили, описывающие их характеристики, и система будет рекомендовать элемент пользователю, если оба профиля совпадают. " \
              "Модная коробка Stitch Fix - еще один пример рекомендаций, основанных на контенте. Атрибуты пользователя собираются (рост, вес и т. Д.), " \
              "А подходящие модные товары помещаются в коробку, поставляемую пользователю (Stitch Fix | 2013).Для Пандоры ручные усилия / затраты необходимы для создания " \
              "музыкальных атрибутов, но во многих случаях такой необходимости нет. Клиенты Stitch Fix предоставляют свои собственные предпочтения, пользователи Linkedin " \
              "предоставляют свой собственный опыт работы и навыки, продавцы на Amazon предоставляют информацию о своих товарах, все они свободно используются для " \
              "рекомендаций на основе контента. Простой способ сопоставления пользователей и элементов - это сопоставление ключевых слов. Например, для рекомендаций по работе " \
              "можно сопоставить описание работы с резюме соискателей. Термин частота-обратная частота документа часто используется для придания большего веса ключевым словам," \
              " уникальным для элемента или пользователя. Более систематическим способом является построение контролируемой модели, оценивающей склонность пользователя," \
              " которому нравится невидимый элемент. В модели признаками являются атрибуты от пользователей и элементов (например, переменная индикатора того, " \
              "находится ли работа и ищущий работу в одной отрасли), а переменная ответа - нравится ли пользователю элемент (например, ищет ли работа ищущая)" \
              " подал бы заявку на работу). Методы, основанные на контенте, являются вычислительно быстрыми и интерпретируемыми. Они могут быть легко адаптированы к " \
              "новым элементам или новым пользователям. Тем не менее, некоторые характеристики предметов / пользователей может быть нелегко уловить или описать явно. " \
              "Исправление стежков устраняет эту проблему, позволяя машинному обучению обрабатывать структурированные данные, а человеку - неструктурированным данным " \
              "(например, на доске объявлений Pinterest)."
    print('Send message with 0 error')
    s.sendall(encoder.encode(message, 0).encode())
    print(str(s.recv(50000), 'utf-8'))

    print('\nSend message with 1 error')
    s.sendall(encoder.encode(message, 1).encode(encoding='UTF-8'))
    print(str(s.recv(50000), 'utf-8'))
    print('\nSend message with 2 error')
    s.sendall(encoder.encode(message, 2).encode(encoding='UTF-8'))
    print(str(s.recv(50000), 'utf-8'))
    print('Close socket')
    s.close()